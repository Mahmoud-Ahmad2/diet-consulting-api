interface Node {
  id: ID!
}

type Consultant implements Node {
id: ID!
email: String!
username: String!
password: String!
firstName: String!
lastName: String!
middleName: String
createdAt: DateTime!
updatedAt: DateTime!
}


type Question implements Node {
  id: ID!
  question: String!
  isAnswered: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Answer implements Node {
  id: ID!
  questionId: ID!
  consultantId: ID!
  title: String!
  description: String!
  recommendation: String!
  isDraft: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  deletedBy: ID
  createdBy: ID!
  updatedBy: ID
}

type Vote implements Node {
  id: ID!
  answerId: ID!
  consultantId: ID!
  vote: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  questions(offset: Int): [Question!]
  question(questionId: ID): Question!
}

type Mutation {
  consultantCreate(
  email: String!, 
  username: String!, 
  password: String!, 
  firstName: String!, 
  lastName: String!, 
  middleName: String
  ): Consultant

  consultantLogin(
  email:String, 
  username: String, 
  password: String!
  ): Consultant

  answerDraftCreate(
  questionId: ID!, 
  title: String!, 
  description: String!, 
  recommendation: String!
  ): Answer

  answerCreate(questionId: ID!): Answer

  answerDelete(
  answerId: ID!,
  questionId: ID!
  ): Answer

  voteCreate(
  answerId: ID!,
  vote: String!
  ): vote
}